name: Receptor CI/CD to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # workflow_dispatch:
  #   inputs:
  #     version:
  #       description: 'Version to release. (x.y.z) Will create a tag / draft release.'
  #       required: true
  #       default: ''
  #     ref:
  #       description: 'The ref to tag. Can be a branch name / SHA / etc.'
  #       required: true
  #       default: ''
  #     confirm:
  #       description: 'Are you sure? Set this to yes.'
  #       required: true
  #       default: 'yes'

jobs:
  docker:
    runs-on: ubuntu-latest
    # permissions:
    #   packages: write
    #   contents: write
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2.0.0
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      # - 
        # name: Linelint
        # uses: fernandrone/linelint@0.0.4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0
        with:
          install: true
      -  
        name: Generate build ID
        id: prep
        run: |
          branch=${GITHUB_REF##*/}
          # sha=${GITHUB_SHA::8}
          # ts=$(date +%s)
          ts=$(date +%Y-%m-%d--%H-%M)
          echo "::set-output name=BUILD_ID::${branch}-${ts}"          
      - 
        name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: 'pypy3.9'
      - 
        name: Install dependencies
        run: |
          python3 -m pip install build

      -
        name: Checkout
        uses: actions/checkout@v4

      -     
        name: Cache Docker layers
        uses: actions/cache@v3.3.1
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      -
        name: Login to DockerHub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Build container image
        run: |
          export  CONTAINERCMD="docker buildx"
          export EXTRA_OPTS="--platform linux/s390x,linux/arm64 --push"
          make container REPO=docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }} TAG=latest VERSION=v1.3.0 LATEST=yes
#         make container OFFICIAL_VERSION=yes CONTAINERCMD=docker REPO=docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }} VERSION=v1.3.0 LATEST=
      # - 
      #   name: Docker Manifest GitHub Action
      #   uses: Noelware/docker-manifest-action@0.3.1
      #   with:
      #     inputs: docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:latest
      #     images: docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:amd64, docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:arm64, docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:s390x
      #     push: true
      #     amend: true
        

      # -   
      #   name : Docker Scan Image
      #   id: scan
      #   uses: anchore/scan-action@v3.3.4
      #   with:
      #     image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}
      #     fail-build: false
      #     acs-report-enable: true
      

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}
          args: --file=Dockerfile

      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: snyk.sarif

      # - uses: ncipollo/release-action@v1
      #   with:
      #     # artifacts: "release.tar.gz,foo/*.txt"
      #     # bodyFile: "body.md"
      #     token: ${{ secrets.GITHUB_TOKEN }}          

      - name: Create draft release
        run: |
          ansible-playbook tools/ansible/stage.yml \
            -e version=${{ github.event.inputs.version }} \
            -e repo=${{ github.repository_owner }}/receptor \
            -e github_token=${{ secrets.GITHUB_TOKEN }} \
            -e target_commitish=${{ github.event.inputs.ref }}

      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}