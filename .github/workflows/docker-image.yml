name: Receptor CI/CD to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release. (x.y.z) Will create a tag / draft release.'
        required: true
        default: ''
      ref:
        description: 'The ref to tag. Can be a branch name / SHA / etc.'
        required: true
        default: ''
      confirm:
        description: 'Are you sure? Set this to yes.'
        required: true
        default: 'yes'

jobs:
  docker:
    runs-on: ubuntu-latest
    # permissions:
    #   packages: write
    #   contents: write
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2.0.0
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      # - 
        # name: Linelint
        # uses: fernandrone/linelint@0.0.4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0
        with:
          install: true
      -  
        name: Generate build ID
        id: prep
        run: |
          branch=${GITHUB_REF##*/}
          # sha=${GITHUB_SHA::8}
          # ts=$(date +%s)
          ts=$(date +%Y-%m-%d--%H-%M)
          echo "::set-output name=BUILD_ID::${branch}-${ts}"          

      - 
        name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: 'pypy3.9'
      - 
        name: Install dependencies
        run: |
          python3 -m pip install build

      -
        name: Checkout
        uses: actions/checkout@v3

      -     
        name: Cache Docker layers
        uses: actions/cache@v3.0.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      -
        name: Login to DockerHub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      # -
      #   name: Build and push
      #   uses: docker/build-push-action@v3.0.0
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     push: true
      #     platforms: linux/amd64, linux/arm64, linux/ppc64le, linux/s390x
      #     # platforms: linux/amd64, linux/ppc64le, linux/s390x
      #     # platforms: linux/amd64, linux/s390x
      #     # platforms: linux/s390x
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:latest, 
      #           ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:v1,
      #           ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:${{ steps.prep.outputs.BUILD_ID }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build container image
        run: |
          make container OFFICIAL_VERSION=yes CONTAINERCMD=docker REPO=docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }} VERSION=v${{ github.event.inputs.version }} LATEST=yes
      -   
        name : Docker Scan Image
        id: scan
        uses: anchore/scan-action@v3.2.5
        with:
          image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}
          fail-build: false
          acs-report-enable: true
      
      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Container image scan
        uses: Azure/container-scan@v0.1
        with:
          image-name: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}
          args: --file=Dockerfile

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
          
      - name: Create draft release
        run: |
          ansible-playbook tools/ansible/stage.yml \
            -e version=${{ github.event.inputs.version }} \
            -e repo=${{ github.repository_owner }}/receptor \
            -e github_token=${{ secrets.GITHUB_TOKEN }} \
            -e target_commitish=${{ github.event.inputs.ref }}

      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}